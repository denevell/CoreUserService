apply plugin: 'war'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
    maven {
        url 'http://download.eclipse.org/rt/eclipselink/maven.repo'
    }
}

dependencies {
    compile project(':Natch-io')
    compile project(':Jrappy')
    compile 'log4j:log4j:1.2.7'
    compile 'org.slf4j:slf4j-log4j12:1.6.6'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.6'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.6'
    compile 'org.eclipse.jetty:jetty-jsp:9.1.0.M0'
    compile 'postgresql:postgresql:9.1-901-1.jdbc4'
    compile 'org.eclipse.persistence:eclipselink:2.4.0'
	compile 'org.mindrot:jbcrypt:0.3m'
	compile 'org.apache.commons:commons-lang3:3.1'
	compile 'org.pegdown:pegdown:1.2.1'
	compile 'org.hibernate:hibernate-validator:5.1.0.CR1'
	compile 'org.glassfish.jersey.ext:jersey-bean-validation:2.6'

    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'junit:junit:4.11'
}

def migrationScript(connStr) {
       def cmdstr = 'go run '+file('.')+'/db_migration.go ' + connStr
       def cmd = cmdstr.execute()
       cmd.waitFor()
       def cmdres = cmd.text
       if(cmd.exitValue()) {
               throw new GradleException("Couldn't complete migration script: " + cmd.err.text)
       } else {
               println "Migration script okay.: " + cmdres
       }
}

task migrate() << {
	def connStr = "postgres://denevell:user@localhost:5432/userservice"
	migrationScript(connStr)
}

if(project.property('prod')=='true') {
	sourceSets.main.resources.srcDirs 'src/main/resources', 'src/prod/resources'
} else {
	war.dependsOn migrate
}
