apply plugin: 'war'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
    maven {
        url 'http://download.eclipse.org/rt/eclipselink/maven.repo'
    }
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

dependencies {
    providedCompile 'org.eclipse.jetty:jetty-jsp:9.1.0.M0'
    compile 'log4j:log4j:1.2.7'
    compile 'org.slf4j:slf4j-log4j12:1.6.6'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.6'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.6'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'com.squareup:javawriter:2.5.0';
    compile 'postgresql:postgresql:9.1-901-1.jdbc4'
    compile 'org.hibernate:hibernate-validator:5.1.0.CR1'
    compile 'org.glassfish.jersey.ext:jersey-bean-validation:2.6'
    compile 'org.eclipse.persistence:eclipselink:2.4.0'
    compile 'org.mindrot:jbcrypt:0.3m'

    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'junit:junit:4.11'
}

test {  
        testLogging.events = ['failed','passed']
        testLogging.showStandardStreams = true
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
}

task cleanWars() << {
        ["rm", "CoreUserService-ForAutomatedTests.war"].execute()
        ["rm", "CoreUserService-Production.war"].execute()
}
clean.dependsOn = [cleanWars]

task jettyStop() << {
        println("Stopping Jetty based on its WAR name")
        ["bash", "-c", "ps -aux | grep -v grep | grep 'java.* -jar.* CoreUserService-ForAutomatedTests.war' | awk '{ print \$2}' | xargs kill -9"].execute()
        sleep(1000)
}

task jettyStart(dependsOn: [jettyStop]) << {
        println("Starting Jetty")
        ["mkdir", "logs"].execute();
        def cmd = ["bash", "-c", "java -Xdebug -Xrunjdwp:transport=dt_socket,address=8010,server=y,suspend=n -server -Xmx50m -jar jetty-runner-9.1.0.M0.jar --port 8083 CoreUserService-ForAutomatedTests.war &> logs/jetty-stdout-stderr.log"].execute()
        cmd.in.close()
        cmd.out.close()
        cmd.err.close()
        println("Waiting 7 seconds to settle")
        sleep(7000)
        println("Finished waiting")
}

war {
	destinationDir = new File(".")
	classifier = 'ForAutomatedTests'	
}

jar {
    // Include all the dependencies to create a fat jar so we can use the processor elsewhere
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes("Main-Class": "org.denevell.userservice.Proc" )
    }
    baseName = 'ap'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
}

if(project.hasProperty('PRODUCTION')) {
	sourceSets.main.resources.srcDirs 'src/main/resources', 'src/prod/resources'
	war {
		classifier = 'Production'	
	}
} 
